; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=jvm32-unknown-unknown | FileCheck %s --check-prefix=JVM -match-full-lines

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @checkVal(i32 %a) #0 {
; JVM:       iload 0
; JVM-NEXT:    istore 2
; JVM-NEXT:    iload 2
; JVM-NEXT:    iconst_2
; JVM-NEXT:    irem
; JVM-NEXT:    istore 3
; JVM-NEXT:    iload 3
; JVM-NEXT:    iconst_0
; JVM-NEXT:    if_icmpne LBB0_2
; JVM-NEXT:    goto LBB0_1
; JVM-NEXT:  LBB0_1:
; JVM-NEXT:    ldc 1
; JVM-NEXT:    istore 1
; JVM-NEXT:    goto LBB0_3
; JVM-NEXT:  LBB0_2:
; JVM-NEXT:    ldc 0
; JVM-NEXT:    istore 1
; JVM-NEXT:  LBB0_3:
; JVM-NEXT:    iload 1
; JVM-NEXT:    istore 4
; JVM-NEXT:    iload 4
; JVM-NEXT:    iconst_1
; JVM-NEXT:    iand
; JVM-NEXT:    istore 5
; JVM-NEXT:    iload 5
; JVM-NEXT:    ireturn
entry:
  %retval = alloca i1, align 1
  %a.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  %0 = load i32, i32* %a.addr, align 4
  %rem = srem i32 %0, 2
  %cmp = icmp eq i32 %rem, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* %retval, align 1
  br label %return

if.else:                                          ; preds = %entry
  store i1 false, i1* %retval, align 1
  br label %return

return:                                           ; preds = %if.else, %if.then
  %1 = load i1, i1* %retval, align 1
  ret i1 %1
}
attributes #0 = { noinline nounwind uwtable}
