; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py

; RUN: llc < %s -mtriple=jvm32-unknown-unknown -jvm-candidate-checker | FileCheck %s --check-prefix=JVM -match-full-lines

%struct.S1 = type { i8 }
%union.overlap = type { i32 }

; Function Attrs: noinline nounwind uwtable
define dso_local signext i8 @func(i8 %sobj.coerce) #0 {
; JVM:       new AoCClass2
; JVM-NEXT:    dup
; JVM-NEXT:    invokenonvirtual AoCClass2/<init>()V
; JVM-NEXT:    astore 2
; JVM-NEXT:    new AoCClass1
; JVM-NEXT:    dup
; JVM-NEXT:    invokenonvirtual AoCClass1/<init>()V
; JVM-NEXT:    astore 4
; JVM-NEXT:    aload 2
; JVM-NEXT:    iload 0
; JVM-NEXT:    putfield AoCClass2/f0 B
; JVM-NEXT:    aload 4
; JVM-NEXT:    getfield AoCClass1/f0 I
; JVM-NEXT:    istore 5
; JVM-NEXT:    iload 5
; JVM-NEXT:    i2b
; JVM-NEXT:    istore 6
; JVM-NEXT:    iload 6
; JVM-NEXT:    aload 2
; JVM-NEXT:    getfield AoCClass2/f0 B
; JVM-NEXT:    istore 7
; JVM-NEXT:    iload 7
; JVM-NEXT:    istore 8
; JVM-NEXT:    iload 8
; JVM-NEXT:    istore 9
; JVM-NEXT:    iload 9
; JVM-NEXT:    iadd
; JVM-NEXT:    istore 10
; JVM-NEXT:    iload 10
; JVM-NEXT:    i2b
; JVM-NEXT:    istore 11
; JVM-NEXT:    iload 11
; JVM-NEXT:    istore 12
; JVM-NEXT:    iload 12
; JVM-NEXT:    ireturn
entry:
  %sobj = alloca %struct.S1, align 1
  %uobj = alloca %union.overlap, align 4
  %coerce.dive = getelementptr inbounds %struct.S1, %struct.S1* %sobj, i32 0, i32 0
  store i8 %sobj.coerce, i8* %coerce.dive, align 1
  %f2 = bitcast %union.overlap* %uobj to i8*
  %0 = load i8, i8* %f2, align 4
  %conv = sext i8 %0 to i32
  %f1 = getelementptr inbounds %struct.S1, %struct.S1* %sobj, i32 0, i32 0
  %1 = load i8, i8* %f1, align 1
  %conv1 = sext i8 %1 to i32
  %add = add nsw i32 %conv, %conv1
  %conv2 = trunc i32 %add to i8
  ret i8 %conv2
}
attributes #0 = { noinline nounwind uwtable}
