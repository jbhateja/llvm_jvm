; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=jvm32-unknown-unknown | FileCheck %s --check-prefix=JVM -match-full-lines

define dso_local i32 @fun(i32 %a, i32 %b, i32 %c) #0 {
; JVM:       iload 0
; JVM-NEXT:    istore 3
; JVM-NEXT:    iload 1
; JVM-NEXT:    istore 4
; JVM-NEXT:    iload 2
; JVM-NEXT:    istore 5
; JVM-NEXT:    iload 3
; JVM-NEXT:    iload 4
; JVM-NEXT:    iadd
; JVM-NEXT:    istore 8
; JVM-NEXT:    iload 8
; JVM-NEXT:    istore 6
; JVM-NEXT:    iload 3
; JVM-NEXT:    iload 5
; JVM-NEXT:    iadd
; JVM-NEXT:    istore 9
; JVM-NEXT:    iload 9
; JVM-NEXT:    istore 7
; JVM-NEXT:    iload 6
; JVM-NEXT:    iload 7
; JVM-NEXT:    iadd
; JVM-NEXT:    istore 10
; JVM-NEXT:    iload 10
; JVM-NEXT:    ireturn
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %c.addr = alloca i32, align 4
  %t1 = alloca i32, align 4
  %t2 = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  %0 = load i32, i32* %a.addr, align 4
  %1 = load i32, i32* %b.addr, align 4
  %add = add nsw i32 %0, %1
  store i32 %add, i32* %t1, align 4
  %2 = load i32, i32* %a.addr, align 4
  %3 = load i32, i32* %c.addr, align 4
  %add1 = add nsw i32 %2, %3
  store i32 %add1, i32* %t2, align 4
  %4 = load i32, i32* %t1, align 4
  %5 = load i32, i32* %t2, align 4
  %add2 = add nsw i32 %4, %5
  ret i32 %add2
}

attributes #0 = { optnone nounwind noinline uwtable }

