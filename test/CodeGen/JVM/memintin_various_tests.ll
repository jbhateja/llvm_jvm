; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py

; RUN: llc < %s -mtriple=jvm32-unknown-unknown | FileCheck %s --check-prefix=JVM -match-full-lines

%struct.S1 = type { i32, i32, %struct.S2 }
%struct.S2 = type { i32, i32 }
%struct.S3 = type { i32, i8 }

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @copyMem0(i64 %src.coerce0, i64 %src.coerce1) #0 {
; JVM:       new AoCClass1
; JVM-NEXT:    dup
; JVM-NEXT:    invokenonvirtual AoCClass1/<init>()V
; JVM-NEXT:    astore 5
; JVM-NEXT:    new AoCClass2
; JVM-NEXT:    dup
; JVM-NEXT:    invokenonvirtual AoCClass2/<init>()V
; JVM-NEXT:    astore 7
; JVM-NEXT:    aload 5
; JVM-NEXT:    lload 0
; JVM-NEXT:    l2i
; JVM-NEXT:    istore 8
; JVM-NEXT:    iload 8
; JVM-NEXT:    putfield AoCClass1/f0 I
; JVM-NEXT:    aload 5
; JVM-NEXT:    lload 0
; JVM-NEXT:    ldc 32
; JVM-NEXT:    lushr
; JVM-NEXT:    lstore 9
; JVM-NEXT:    lload 9
; JVM-NEXT:    l2i
; JVM-NEXT:    istore 11
; JVM-NEXT:    iload 11
; JVM-NEXT:    putfield AoCClass1/f1 I
; JVM-NEXT:    aload 5
; JVM-NEXT:    getfield AoCClass1/f2 LAoCClass2;
; JVM-NEXT:    lload 2
; JVM-NEXT:    l2i
; JVM-NEXT:    istore 12
; JVM-NEXT:    iload 12
; JVM-NEXT:    putfield AoCClass2/f0 I
; JVM-NEXT:    aload 5
; JVM-NEXT:    getfield AoCClass1/f2 LAoCClass2;
; JVM-NEXT:    lload 2
; JVM-NEXT:    ldc 32
; JVM-NEXT:    lushr
; JVM-NEXT:    lstore 13
; JVM-NEXT:    lload 13
; JVM-NEXT:    l2i
; JVM-NEXT:    istore 15
; JVM-NEXT:    iload 15
; JVM-NEXT:    putfield AoCClass2/f1 I
; JVM-NEXT:    aload 7
; JVM-NEXT:    ldc 168430090
; JVM-NEXT:    putfield AoCClass2/f0 I
; JVM-NEXT:    aload 7
; JVM-NEXT:    ldc 168430090
; JVM-NEXT:    putfield AoCClass2/f1 I
; JVM-NEXT:    aload 7
; JVM-NEXT:    getfield AoCClass2/f1 I
; JVM-NEXT:    istore 16
; JVM-NEXT:    iload 16
; JVM-NEXT:    ireturn
entry:
  %src = alloca %struct.S1, align 4
  %dst = alloca %struct.S2, align 4
  %0 = bitcast %struct.S1* %src to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %src.coerce0, i64* %1, align 4
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %src.coerce1, i64* %2, align 4
  %3 = bitcast %struct.S2* %dst to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %3, i8 10, i64 8, i1 false)
  %f2 = getelementptr inbounds %struct.S2, %struct.S2* %dst, i32 0, i32 1
  %4 = load i32, i32* %f2, align 4
  ret i32 %4
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1) #1

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @copyMem1(i64 %src.coerce0, i64 %src.coerce1) #0 {
; JVM:       new AoCClass4
; JVM-NEXT:    dup
; JVM-NEXT:    invokenonvirtual AoCClass4/<init>()V
; JVM-NEXT:    astore 5
; JVM-NEXT:    new AoCClass5
; JVM-NEXT:    dup
; JVM-NEXT:    invokenonvirtual AoCClass5/<init>()V
; JVM-NEXT:    astore 7
; JVM-NEXT:    aload 5
; JVM-NEXT:    lload 0
; JVM-NEXT:    l2i
; JVM-NEXT:    istore 8
; JVM-NEXT:    iload 8
; JVM-NEXT:    putfield AoCClass4/f1 I
; JVM-NEXT:    aload 5
; JVM-NEXT:    lload 0
; JVM-NEXT:    ldc 32
; JVM-NEXT:    lushr
; JVM-NEXT:    lstore 9
; JVM-NEXT:    lload 9
; JVM-NEXT:    l2i
; JVM-NEXT:    istore 11
; JVM-NEXT:    iload 11
; JVM-NEXT:    putfield AoCClass4/f1 I
; JVM-NEXT:    aload 5
; JVM-NEXT:    getfield AoCClass4/f2 LAoCClass5;
; JVM-NEXT:    lload 2
; JVM-NEXT:    l2i
; JVM-NEXT:    istore 12
; JVM-NEXT:    iload 12
; JVM-NEXT:    putfield AoCClass5/f0 I
; JVM-NEXT:    aload 5
; JVM-NEXT:    getfield AoCClass4/f2 LAoCClass5;
; JVM-NEXT:    lload 2
; JVM-NEXT:    ldc 32
; JVM-NEXT:    lushr
; JVM-NEXT:    lstore 13
; JVM-NEXT:    lload 13
; JVM-NEXT:    l2i
; JVM-NEXT:    istore 15
; JVM-NEXT:    iload 15
; JVM-NEXT:    putfield AoCClass5/f1 I
; JVM-NEXT:    aload 5
; JVM-NEXT:    getfield AoCClass4/f1 I
; JVM-NEXT:    istore 16
; JVM-NEXT:    aload 7
; JVM-NEXT:    iload 16
; JVM-NEXT:    putfield AoCClass5/f0 I
; JVM-NEXT:    aload 5
; JVM-NEXT:    getfield AoCClass4/f1 I
; JVM-NEXT:    istore 17
; JVM-NEXT:    aload 7
; JVM-NEXT:    iload 17
; JVM-NEXT:    putfield AoCClass5/f1 I
; JVM-NEXT:    aload 7
; JVM-NEXT:    getfield AoCClass5/f1 I
; JVM-NEXT:    istore 18
; JVM-NEXT:    iload 18
; JVM-NEXT:    ireturn
entry:
  %src = alloca %struct.S1, align 4
  %dst = alloca %struct.S2, align 4
  %0 = bitcast %struct.S1* %src to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %src.coerce0, i64* %1, align 4
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %src.coerce1, i64* %2, align 4
  %3 = bitcast %struct.S2* %dst to i8*
  %4 = bitcast %struct.S1* %src to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %3, i8* align 4 %4, i64 8, i1 false)
  %f2 = getelementptr inbounds %struct.S2, %struct.S2* %dst, i32 0, i32 1
  %5 = load i32, i32* %f2, align 4
  ret i32 %5
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1) #1

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @copyMem2(i64 %src.coerce0, i64 %src.coerce1) #0 {
; JVM:       new AoCClass7
; JVM-NEXT:    dup
; JVM-NEXT:    invokenonvirtual AoCClass7/<init>()V
; JVM-NEXT:    astore 5
; JVM-NEXT:    iconst_2
; JVM-NEXT:    newarray int
; JVM-NEXT:    astore 7
; JVM-NEXT:    aload 5
; JVM-NEXT:    lload 0
; JVM-NEXT:    l2i
; JVM-NEXT:    istore 8
; JVM-NEXT:    iload 8
; JVM-NEXT:    putfield AoCClass7/f0 I
; JVM-NEXT:    aload 5
; JVM-NEXT:    lload 0
; JVM-NEXT:    ldc 32
; JVM-NEXT:    lushr
; JVM-NEXT:    lstore 9
; JVM-NEXT:    lload 9
; JVM-NEXT:    l2i
; JVM-NEXT:    istore 11
; JVM-NEXT:    iload 11
; JVM-NEXT:    putfield AoCClass7/f1 I
; JVM-NEXT:    aload 5
; JVM-NEXT:    getfield AoCClass7/f2 LAoCClass8;
; JVM-NEXT:    lload 2
; JVM-NEXT:    l2i
; JVM-NEXT:    istore 12
; JVM-NEXT:    iload 12
; JVM-NEXT:    putfield AoCClass8/f0 I
; JVM-NEXT:    aload 5
; JVM-NEXT:    getfield AoCClass7/f2 LAoCClass8;
; JVM-NEXT:    lload 2
; JVM-NEXT:    ldc 32
; JVM-NEXT:    lushr
; JVM-NEXT:    lstore 13
; JVM-NEXT:    lload 13
; JVM-NEXT:    l2i
; JVM-NEXT:    istore 15
; JVM-NEXT:    iload 15
; JVM-NEXT:    putfield AoCClass8/f1 I
; JVM-NEXT:    aload 5
; JVM-NEXT:    getfield AoCClass7/f0 I
; JVM-NEXT:    istore 16
; JVM-NEXT:    aload 7
; JVM-NEXT:    bipush 0
; JVM-NEXT:    iload 16
; JVM-NEXT:    iastore
; JVM-NEXT:    aload 5
; JVM-NEXT:    getfield AoCClass7/f1 I
; JVM-NEXT:    istore 17
; JVM-NEXT:    aload 7
; JVM-NEXT:    bipush 1
; JVM-NEXT:    iload 17
; JVM-NEXT:    iastore
; JVM-NEXT:    aload 7
; JVM-NEXT:    bipush 1
; JVM-NEXT:    iaload
; JVM-NEXT:    istore 18
; JVM-NEXT:    iload 18
; JVM-NEXT:    ireturn
entry:
  %src = alloca %struct.S1, align 4
  %dst = alloca [2 x i32], align 4
  %0 = bitcast %struct.S1* %src to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %src.coerce0, i64* %1, align 4
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %src.coerce1, i64* %2, align 4
  %3 = bitcast [2 x i32]* %dst to i8*
  %4 = bitcast %struct.S1* %src to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3, i8* align 4 %4, i64 8, i1 false)
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %dst, i64 0, i64 1
  %5 = load i32, i32* %arrayidx, align 4
  ret i32 %5
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1) #1

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @copyMem3(i64 %src.coerce0, i64 %src.coerce1) #0 {
; JVM:       new AoCClass10
; JVM-NEXT:    dup
; JVM-NEXT:    invokenonvirtual AoCClass10/<init>()V
; JVM-NEXT:    astore 5
; JVM-NEXT:    iconst_2
; JVM-NEXT:    newarray int
; JVM-NEXT:    astore 7
; JVM-NEXT:    aload 5
; JVM-NEXT:    lload 0
; JVM-NEXT:    l2i
; JVM-NEXT:    istore 8
; JVM-NEXT:    iload 8
; JVM-NEXT:    putfield AoCClass10/f0 I
; JVM-NEXT:    aload 5
; JVM-NEXT:    lload 0
; JVM-NEXT:    ldc 32
; JVM-NEXT:    lushr
; JVM-NEXT:    lstore 9
; JVM-NEXT:    lload 9
; JVM-NEXT:    l2i
; JVM-NEXT:    istore 11
; JVM-NEXT:    iload 11
; JVM-NEXT:    putfield AoCClass10/f1 I
; JVM-NEXT:    aload 5
; JVM-NEXT:    getfield AoCClass10/f2 LAoCClass11;
; JVM-NEXT:    lload 2
; JVM-NEXT:    l2i
; JVM-NEXT:    istore 12
; JVM-NEXT:    iload 12
; JVM-NEXT:    putfield AoCClass11/f0 I
; JVM-NEXT:    aload 5
; JVM-NEXT:    getfield AoCClass10/f2 LAoCClass11;
; JVM-NEXT:    lload 2
; JVM-NEXT:    ldc 32
; JVM-NEXT:    lushr
; JVM-NEXT:    lstore 13
; JVM-NEXT:    lload 13
; JVM-NEXT:    l2i
; JVM-NEXT:    istore 15
; JVM-NEXT:    iload 15
; JVM-NEXT:    putfield AoCClass11/f1 I
; JVM-NEXT:    aload 5
; JVM-NEXT:    getfield AoCClass10/f0 I
; JVM-NEXT:    istore 16
; JVM-NEXT:    aload 7
; JVM-NEXT:    bipush 1
; JVM-NEXT:    iload 16
; JVM-NEXT:    iastore
; JVM-NEXT:    aload 7
; JVM-NEXT:    bipush 0
; JVM-NEXT:    iaload
; JVM-NEXT:    istore 17
; JVM-NEXT:    iload 17
; JVM-NEXT:    ldc 65280
; JVM-NEXT:    iand
; JVM-NEXT:    istore 18
; JVM-NEXT:    iload 18
; JVM-NEXT:    ldc 8
; JVM-NEXT:    iushr
; JVM-NEXT:    istore 19
; JVM-NEXT:    iload 19
; JVM-NEXT:    i2b
; JVM-NEXT:    istore 20
; JVM-NEXT:    iload 20
; JVM-NEXT:    istore 21
; JVM-NEXT:    iload 21
; JVM-NEXT:    ireturn
entry:
  %src = alloca %struct.S1, align 4
  %buf = alloca [2 x i32], align 4
  %0 = bitcast %struct.S1* %src to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %src.coerce0, i64* %1, align 4
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %src.coerce1, i64* %2, align 4
  %arraydecay = getelementptr inbounds [2 x i32], [2 x i32]* %buf, i32 0, i32 0
  %3 = bitcast i32* %arraydecay to i8*
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 4
  %4 = bitcast %struct.S1* %src to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %add.ptr, i8* align 4 %4, i64 4, i1 false)
  %arrayidx = getelementptr inbounds i8, i8* %3, i64 1
  %5 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %5 to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @copyMem4(i64 %src.coerce0, i64 %src.coerce1) #0 {
; JVM:       new AoCClass13
; JVM-NEXT:    dup
; JVM-NEXT:    invokenonvirtual AoCClass13/<init>()V
; JVM-NEXT:    astore 5
; JVM-NEXT:    new AoCClass14
; JVM-NEXT:    dup
; JVM-NEXT:    invokenonvirtual AoCClass14/<init>()V
; JVM-NEXT:    astore 7
; JVM-NEXT:    aload 5
; JVM-NEXT:    lload 0
; JVM-NEXT:    l2i
; JVM-NEXT:    istore 8
; JVM-NEXT:    iload 8
; JVM-NEXT:    putfield AoCClass13/f0 I
; JVM-NEXT:    aload 5
; JVM-NEXT:    lload 0
; JVM-NEXT:    ldc 32
; JVM-NEXT:    lushr
; JVM-NEXT:    lstore 9
; JVM-NEXT:    lload 9
; JVM-NEXT:    l2i
; JVM-NEXT:    istore 11
; JVM-NEXT:    iload 11
; JVM-NEXT:    putfield AoCClass13/f1 I
; JVM-NEXT:    aload 5
; JVM-NEXT:    getfield AoCClass13/f2 LAoCClass14;
; JVM-NEXT:    lload 2
; JVM-NEXT:    l2i
; JVM-NEXT:    istore 12
; JVM-NEXT:    iload 12
; JVM-NEXT:    putfield AoCClass14/f0 I
; JVM-NEXT:    aload 5
; JVM-NEXT:    getfield AoCClass13/f2 LAoCClass14;
; JVM-NEXT:    lload 2
; JVM-NEXT:    ldc 32
; JVM-NEXT:    lushr
; JVM-NEXT:    lstore 13
; JVM-NEXT:    lload 13
; JVM-NEXT:    l2i
; JVM-NEXT:    istore 15
; JVM-NEXT:    iload 15
; JVM-NEXT:    putfield AoCClass14/f1 I
; JVM-NEXT:    aload 5
; JVM-NEXT:    getfield AoCClass13/f0 I
; JVM-NEXT:    istore 16
; JVM-NEXT:    aload 7
; JVM-NEXT:    iload 16
; JVM-NEXT:    putfield AoCClass14/f1 I
; JVM-NEXT:    aload 7
; JVM-NEXT:    getfield AoCClass14/f0 I
; JVM-NEXT:    istore 17
; JVM-NEXT:    iload 17
; JVM-NEXT:    ldc 65280
; JVM-NEXT:    iand
; JVM-NEXT:    istore 18
; JVM-NEXT:    iload 18
; JVM-NEXT:    ldc 8
; JVM-NEXT:    iushr
; JVM-NEXT:    istore 19
; JVM-NEXT:    iload 19
; JVM-NEXT:    i2b
; JVM-NEXT:    istore 20
; JVM-NEXT:    iload 20
; JVM-NEXT:    istore 21
; JVM-NEXT:    iload 21
; JVM-NEXT:    ireturn
entry:
  %src = alloca %struct.S1, align 4
  %buf = alloca %struct.S2, align 4
  %0 = bitcast %struct.S1* %src to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %src.coerce0, i64* %1, align 4
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %src.coerce1, i64* %2, align 4
  %3 = bitcast %struct.S2* %buf to i8*
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 4
  %4 = bitcast %struct.S1* %src to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %add.ptr, i8* align 4 %4, i64 4, i1 false)
  %arrayidx = getelementptr inbounds i8, i8* %3, i64 1
  %5 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %5 to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind uwtable
define dso_local signext i8 @copyMem5(i64 %src.coerce0, i64 %src.coerce1) #0 {
; JVM:       new AoCClass16
; JVM-NEXT:    dup
; JVM-NEXT:    invokenonvirtual AoCClass16/<init>()V
; JVM-NEXT:    astore 5
; JVM-NEXT:    new AoCClass18
; JVM-NEXT:    dup
; JVM-NEXT:    invokenonvirtual AoCClass18/<init>()V
; JVM-NEXT:    astore 7
; JVM-NEXT:    aload 5
; JVM-NEXT:    lload 0
; JVM-NEXT:    l2i
; JVM-NEXT:    istore 8
; JVM-NEXT:    iload 8
; JVM-NEXT:    putfield AoCClass16/f0 I
; JVM-NEXT:    aload 5
; JVM-NEXT:    lload 0
; JVM-NEXT:    ldc 32
; JVM-NEXT:    lushr
; JVM-NEXT:    lstore 9
; JVM-NEXT:    lload 9
; JVM-NEXT:    l2i
; JVM-NEXT:    istore 11
; JVM-NEXT:    iload 11
; JVM-NEXT:    putfield AoCClass16/f1 I
; JVM-NEXT:    aload 5
; JVM-NEXT:    getfield AoCClass16/f2 LAoCClass17;
; JVM-NEXT:    lload 2
; JVM-NEXT:    l2i
; JVM-NEXT:    istore 12
; JVM-NEXT:    iload 12
; JVM-NEXT:    putfield AoCClass17/f0 I
; JVM-NEXT:    aload 5
; JVM-NEXT:    getfield AoCClass16/f2 LAoCClass17;
; JVM-NEXT:    lload 2
; JVM-NEXT:    ldc 32
; JVM-NEXT:    lushr
; JVM-NEXT:    lstore 13
; JVM-NEXT:    lload 13
; JVM-NEXT:    l2i
; JVM-NEXT:    istore 15
; JVM-NEXT:    iload 15
; JVM-NEXT:    putfield AoCClass17/f1 I
; JVM-NEXT:    aload 5
; JVM-NEXT:    getfield AoCClass16/f0 I
; JVM-NEXT:    istore 16
; JVM-NEXT:    aload 7
; JVM-NEXT:    iload 16
; JVM-NEXT:    putfield AoCClass18/f0 I
; JVM-NEXT:    aload 5
; JVM-NEXT:    getfield AoCClass16/f1 I
; JVM-NEXT:    istore 17
; JVM-NEXT:    aload 7
; JVM-NEXT:    iload 17
; JVM-NEXT:    i2b
; JVM-NEXT:    istore 18
; JVM-NEXT:    iload 18
; JVM-NEXT:    putfield AoCClass18/f1 B
; JVM-NEXT:    aload 7
; JVM-NEXT:    getfield AoCClass18/f0 I
; JVM-NEXT:    istore 19
; JVM-NEXT:    iload 19
; JVM-NEXT:    ldc 65280
; JVM-NEXT:    iand
; JVM-NEXT:    istore 20
; JVM-NEXT:    iload 20
; JVM-NEXT:    ldc 8
; JVM-NEXT:    iushr
; JVM-NEXT:    istore 21
; JVM-NEXT:    iload 21
; JVM-NEXT:    i2b
; JVM-NEXT:    istore 22
; JVM-NEXT:    iload 22
; JVM-NEXT:    istore 23
; JVM-NEXT:    iload 23
; JVM-NEXT:    ireturn
entry:
  %src = alloca %struct.S1, align 4
  %buf = alloca %struct.S3, align 4
  %0 = bitcast %struct.S1* %src to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %src.coerce0, i64* %1, align 4
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %src.coerce1, i64* %2, align 4
  %3 = bitcast %struct.S3* %buf to i8*
  %4 = bitcast %struct.S1* %src to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3, i8* align 4 %4, i64 5, i1 false)
  %arrayidx = getelementptr inbounds i8, i8* %3, i64 1
  %5 = load i8, i8* %arrayidx, align 1
  ret i8 %5
}

; Function Attrs: noinline nounwind uwtable
define dso_local signext i8 @copyMem6(i64 %src.coerce0, i64 %src.coerce1) #0 {
; JVM:       new AoCClass19
; JVM-NEXT:    dup
; JVM-NEXT:    invokenonvirtual AoCClass19/<init>()V
; JVM-NEXT:    astore 5
; JVM-NEXT:    iconst_2
; JVM-NEXT:    newarray int
; JVM-NEXT:    astore 7
; JVM-NEXT:    aload 5
; JVM-NEXT:    lload 0
; JVM-NEXT:    l2i
; JVM-NEXT:    istore 8
; JVM-NEXT:    iload 8
; JVM-NEXT:    putfield AoCClass19/f0 I
; JVM-NEXT:    aload 5
; JVM-NEXT:    lload 0
; JVM-NEXT:    ldc 32
; JVM-NEXT:    lushr
; JVM-NEXT:    lstore 9
; JVM-NEXT:    lload 9
; JVM-NEXT:    l2i
; JVM-NEXT:    istore 11
; JVM-NEXT:    iload 11
; JVM-NEXT:    putfield AoCClass19/f1 I
; JVM-NEXT:    aload 5
; JVM-NEXT:    getfield AoCClass19/f2 LAoCClass20;
; JVM-NEXT:    lload 2
; JVM-NEXT:    l2i
; JVM-NEXT:    istore 12
; JVM-NEXT:    iload 12
; JVM-NEXT:    putfield AoCClass20/f0 I
; JVM-NEXT:    aload 5
; JVM-NEXT:    getfield AoCClass19/f2 LAoCClass20;
; JVM-NEXT:    lload 2
; JVM-NEXT:    ldc 32
; JVM-NEXT:    lushr
; JVM-NEXT:    lstore 13
; JVM-NEXT:    lload 13
; JVM-NEXT:    l2i
; JVM-NEXT:    istore 15
; JVM-NEXT:    iload 15
; JVM-NEXT:    putfield AoCClass20/f1 I
; JVM-NEXT:    aload 5
; JVM-NEXT:    getfield AoCClass19/f0 I
; JVM-NEXT:    istore 16
; JVM-NEXT:    aload 7
; JVM-NEXT:    bipush 0
; JVM-NEXT:    iload 16
; JVM-NEXT:    iastore
; JVM-NEXT:    aload 5
; JVM-NEXT:    getfield AoCClass19/f1 I
; JVM-NEXT:    istore 17
; JVM-NEXT:    aload 7
; JVM-NEXT:    bipush 1
; JVM-NEXT:    iload 17
; JVM-NEXT:    iastore
; JVM-NEXT:    aload 7
; JVM-NEXT:    bipush 0
; JVM-NEXT:    iaload
; JVM-NEXT:    istore 18
; JVM-NEXT:    iload 18
; JVM-NEXT:    ldc 65280
; JVM-NEXT:    iand
; JVM-NEXT:    istore 19
; JVM-NEXT:    iload 19
; JVM-NEXT:    ldc 8
; JVM-NEXT:    iushr
; JVM-NEXT:    istore 20
; JVM-NEXT:    iload 20
; JVM-NEXT:    i2b
; JVM-NEXT:    istore 21
; JVM-NEXT:    iload 21
; JVM-NEXT:    istore 22
; JVM-NEXT:    iload 22
; JVM-NEXT:    ireturn
entry:
  %src = alloca %struct.S1, align 4
  %buf = alloca [2 x i32], align 4
  %0 = bitcast %struct.S1* %src to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %src.coerce0, i64* %1, align 4
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %src.coerce1, i64* %2, align 4
  %arraydecay = getelementptr inbounds [2 x i32], [2 x i32]* %buf, i32 0, i32 0
  %3 = bitcast i32* %arraydecay to i8*
  %4 = bitcast %struct.S1* %src to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3, i8* align 4 %4, i64 8, i1 false)
  %arrayidx = getelementptr inbounds i8, i8* %3, i64 1
  %5 = load i8, i8* %arrayidx, align 1
  ret i8 %5
}

; Function Attrs: noinline nounwind uwtable
define dso_local signext i8 @copyMem7(i64 %src.coerce0, i64 %src.coerce1) #0 {
; JVM:       new AoCClass22
; JVM-NEXT:    dup
; JVM-NEXT:    invokenonvirtual AoCClass22/<init>()V
; JVM-NEXT:    astore 5
; JVM-NEXT:    iconst_2
; JVM-NEXT:    newarray int
; JVM-NEXT:    astore 7
; JVM-NEXT:    aload 5
; JVM-NEXT:    lload 0
; JVM-NEXT:    l2i
; JVM-NEXT:    istore 8
; JVM-NEXT:    iload 8
; JVM-NEXT:    putfield AoCClass22/f0 I
; JVM-NEXT:    aload 5
; JVM-NEXT:    lload 0
; JVM-NEXT:    ldc 32
; JVM-NEXT:    lushr
; JVM-NEXT:    lstore 9
; JVM-NEXT:    lload 9
; JVM-NEXT:    l2i
; JVM-NEXT:    istore 11
; JVM-NEXT:    iload 11
; JVM-NEXT:    putfield AoCClass22/f1 I
; JVM-NEXT:    aload 5
; JVM-NEXT:    getfield AoCClass22/f2 LAoCClass23;
; JVM-NEXT:    lload 2
; JVM-NEXT:    l2i
; JVM-NEXT:    istore 12
; JVM-NEXT:    iload 12
; JVM-NEXT:    putfield AoCClass23/f0 I
; JVM-NEXT:    aload 5
; JVM-NEXT:    getfield AoCClass22/f2 LAoCClass23;
; JVM-NEXT:    lload 2
; JVM-NEXT:    ldc 32
; JVM-NEXT:    lushr
; JVM-NEXT:    lstore 13
; JVM-NEXT:    lload 13
; JVM-NEXT:    l2i
; JVM-NEXT:    istore 15
; JVM-NEXT:    iload 15
; JVM-NEXT:    putfield AoCClass23/f1 I
; JVM-NEXT:    aload 5
; JVM-NEXT:    getfield AoCClass22/f0 I
; JVM-NEXT:    istore 16
; JVM-NEXT:    aload 7
; JVM-NEXT:    bipush 1
; JVM-NEXT:    iload 16
; JVM-NEXT:    iastore
; JVM-NEXT:    aload 7
; JVM-NEXT:    bipush 1
; JVM-NEXT:    iaload
; JVM-NEXT:    istore 17
; JVM-NEXT:    iload 17
; JVM-NEXT:    ldc 65280
; JVM-NEXT:    iand
; JVM-NEXT:    istore 18
; JVM-NEXT:    iload 18
; JVM-NEXT:    ldc 8
; JVM-NEXT:    iushr
; JVM-NEXT:    istore 19
; JVM-NEXT:    iload 19
; JVM-NEXT:    i2b
; JVM-NEXT:    istore 20
; JVM-NEXT:    iload 20
; JVM-NEXT:    istore 21
; JVM-NEXT:    iload 21
; JVM-NEXT:    ireturn
entry:
  %src = alloca %struct.S1, align 4
  %buf = alloca [2 x i32], align 4
  %0 = bitcast %struct.S1* %src to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %src.coerce0, i64* %1, align 4
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %src.coerce1, i64* %2, align 4
  %arraydecay = getelementptr inbounds [2 x i32], [2 x i32]* %buf, i32 0, i32 0
  %3 = bitcast i32* %arraydecay to i8*
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 4
  %4 = bitcast %struct.S1* %src to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %add.ptr, i8* align 4 %4, i64 4, i1 false)
  %arrayidx = getelementptr inbounds i8, i8* %add.ptr, i64 1
  %5 = load i8, i8* %arrayidx, align 1
  ret i8 %5
}

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 7.0.0 (https://github.com/llvm-mirror/clang.git 60cec38f68d4f4a3edd8d403c034b5d62a20ebaa) (https://github.com/llvm-mirror/llvm.git d28c01a0d0e31e1eca6fe21663c7b1c3c45303fc)"}
