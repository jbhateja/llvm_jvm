; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=jvm32-unknown-unknown | FileCheck %s --check-prefix=JVM -match-full-lines

%struct.S1 = type { [10 x i32] }

; Function Attrs: noinline nounwind
define dso_local i32 @test(i32 %init) #0 {
; JVM:       new AoCClass1
; JVM-NEXT:    dup
; JVM-NEXT:    invokenonvirtual AoCClass1/<init>()V
; JVM-NEXT:    astore 1
; JVM-NEXT:    aload 1
; JVM-NEXT:    getfield AoCClass1/f0 [I
; JVM-NEXT:    bipush 1
; JVM-NEXT:    ldc 20
; JVM-NEXT:    iastore
; JVM-NEXT:    aload 1
; JVM-NEXT:    getfield AoCClass1/f0 [I
; JVM-NEXT:    bipush 1
; JVM-NEXT:    iaload
; JVM-NEXT:    istore 2
; JVM-NEXT:    iload 2
; JVM-NEXT:    ldc 10
; JVM-NEXT:    iadd
; JVM-NEXT:    istore 3
; JVM-NEXT:    iload 3
; JVM-NEXT:    ireturn
entry:
  %obj = alloca %struct.S1, align 4
  %f1 = getelementptr inbounds %struct.S1, %struct.S1* %obj, i32 0, i32 0
  %arrayidx = getelementptr inbounds [10 x i32], [10 x i32]* %f1, i32 0, i32 1
  store i32 20, i32* %arrayidx, align 4
  %f11 = getelementptr inbounds %struct.S1, %struct.S1* %obj, i32 0, i32 0
  %arrayidx2 = getelementptr inbounds [10 x i32], [10 x i32]* %f11, i32 0, i32 1
  %0 = load i32, i32* %arrayidx2, align 4
  %add = add nsw i32 10, %0
  ret i32 %add
}

attributes #0 = { noinline nounwind}
